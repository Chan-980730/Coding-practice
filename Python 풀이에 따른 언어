파이썬의 기본 구조 - def로 시작되는 명령어는 사용자 정의 함수, class로 시작되는 명령어는 클래스 / def와 class를 제거하였을 때 남아있는 명령어들을 순차적으로 실행
- 파이썬 기본 구조
print('A') : A를 출력 -> A

- 파이썬 기본자료형
print(A+B) : A+B를 출력 (print 안에서 연산 가능 / 정수형, 실수형 조합가능) -> A+B
print(true) : 참값인 True를 출력 ----------> 참값인 True? 그냥 True가 출력되는건지 아니면 결과값이 참값일 때 True가 출력되는건지

- 파이썬 문자열형
print("W"A"W") : 큰따옴표를 포함하여 문자열 A 출력 -> "A"
print("A"*3) : 문자열 A 3번 출력 -> AAA
print("A", "B") : 파이썬에서 print안에 ,(콤마)로 구분될 경우 띄어쓰기가 됨 -> A B
* 파이썬에서 문자열은 큰따옴표로 나타내기 때문에 큰따옴표를 사용하고 싶은 경우 C언어처럼 이스케이프 문자인 \를 사용하여 \"로 씀

- 파이썬 문자열 포맷스트링 출력 ----------> 포맷 스트링이란?
a = "A" : A를 문자열 a에 대입 ----------> 대입이라는 개념은 수학적인 개념으로 긴 함수를 줄여서 편하게 쓰려고 하는 것인가?
print("%s" % a) : 포맷 스트링 %s에 a 문자열 A를 전달하여 출력 -> A ----------> 포맷 스트링 %s란 무엇인가?
b = "%s" % "B" : %s와 문자열 B를 b에 대입
print(a+b) : a와 b를 연결한 A B를 출력 (문자열이기 때문에 띄어쓰기만 추가돼서 출력됨)
c = 123 : C에 정수 123을 대입
print("%s %d" % (a,c)) : %s에는 a, %d에는 c가 매핑되어 A 123이 출력 ----------> %d는 어디서 나온건가? / 코딩에서 띄어쓰기와 ""는 항상 의미가 있는가?

- 파이썬 문자열 in
in : 찾고자 하는 문자열이 존재하면 True, 없으면 False를 리턴함
print("A" in "ABC") : ABC안에 A가 존재하므로 True 출력 -> True
print("A" in "BCD") : BCD안에 A가 존재하지 않으므로 False 출력 -> False

- 문자열 관련 메서드 ----------> 메서드란 무엇인가? 우리나라 단어처럼 그럼 형태?
upper() : 문자열을 대문자로 변환하는 메서드
lower() : 문자열을 소문자로 변환하는 메서드
isalnum() : 문자열이 알파벳 또는 숫자로만 구성되어 있으면 True, 아니면 False를 리턴하는 메서드
isalpha() : 문자열이 알파벳으로만 구성되어 있으면 True, 아니면 False를 리턴하는 메서드
isdecimal() : 문자열이 정수이면 True, 아니면 False를 리턴하는 메서드
isdigit() : 문자열이 숫자이면 True, 아니면 False를 리턴하는 메서드
isspace() : 문자열이 공백으로만 구성되어 있으면 True, 아니면 False를 리턴하는 메서드
split() : 문자열을 매개변수로 전달된 문자(구분자)로 나누어 리스트로 변환하는 메서드 Ex) split(sep='A') : 구분자인 A를 기준으로 분리
* is가 앞에 들어가면 True 혹은 False를 출력하는 것 같음
* 파이썬에서 컬렉션 자료형 변수를 그냥 출력했을 때는 괄호가 표시되지만, 문자열 변수를 출력했을 때는 괄호가 표시되지 않음

- 파이썬 문자열(str) 메서드
a = "Ab 123" : a라는 이름의 변수에 문자열 "Ab 123"를 대입
print(a.upper()) : a를 대문자로 변환한 값을 출력 -> AB 123
print(a.lower()) : a를 소문자로 변환한 값을 출력 -> ab 123
print(a.isalnum()) : a가 알파벳 또는 숫자로만 구성되어 있으면 True, 아니면 False -> False
print(a.isalpha()) : a가 알파벳으로만 구성되어 있으면 True, 아니면 False -> False
print(a.isdecimal()) : a가 정수이면 True, 아니면 False -> False
print(a.isdigit()) : a가 숫자이면 True, 아니면 False -> False
print(a.inspace()) : a가 공백으로만 구성되어 있으면 True, 아니면 False -> False
print(a.split()) : a를 구분자로 분리 (구분자가 지정되어 있지 않으므로 띄어쓰기를 기준으로 분리) -> ['Ab', '123']
print(a.split(sep='1')) : a를 구분자인 '1'을 기준으로 분리 -> ['Ab', '23']
str = "1,2,3".split(",") : 문자열 "1,2,3"에서 ,(콤마)를 기준으로 나눠서 리스트로 생성 ----------> str은 리스트를 생성하는 것인가? 아니면 대입되는 것인가? 아니면 가장 위의 설명처럼 문자열을 나타내는 것인가?
print(str) : str을 출력 -> ['1', '2', '3'] 

- 리스트형 메서드
append(x) : 리스트 마지막 요소 뒤에 값 x를 추가하는 메서드 -> 단위 같은 것을 사용할 때 적절해보임 Ex) 원, kg 등
clear() : 리스트의 모든 항목을 삭제하는 메서드
copy() : 리스트를 복사하는 메서드
count(x) : 리스트에서 x 항목의 개수를 알려주는 메서드
extend(i) : 리스트 마지막에 컬렉션 자료형 i를 추가하는 메서드 ----------> 그렇다면 append와 extend 중 어떤 것이 더 우선이 될까? 둘의 순서?
index(x) : 값 x와 같은 값을 가지고 있는 인덱스 번호를 알려주는 메서드
insert(i, x) : 리스트의 i번지 위치에 값 x를 삽입하는 메서드
pop() : 마지막 항목을 삭제하고 값을 꺼내오는 메서드 ----------> 꺼내온다는 개념이 잘라내기?
remove(x) : 리스트에서 해당하는 값 x를 제거하는 메서드 / 해당하는 값이 여러 개 있을 경우 가장 앞에 있는 값을 제거
reverse() : 리스트의 위치를 전부 역순으로 바꿔주는 메서드
sort() : 리스트의 항목들을 정렬하는 메서드

- 파이썬 리스트형 메서드
a = [20, 10, 30] : 리스트 a 선언 및 20, 10, 30으로 초기화 ----------> 선언이라는 개념? 별로 신경안써도 되나?
print(a) : 리스트에 저장된 [20, 10, 30]을 출력 -> [20, 10, 30]
a.extend(a) : 리스트를 확장하여 20, 10, 30을 한 번에 추가함
print(a) : 리스트 a에 저장된 [20, 10, 30, 20, 10, 30]을 출력 -> [20, 10, 30, 20, 10, 30}
a.pop() : 리스트 마지막 또는 지정 요소를 삭제하고 그 값을 반환함 (지정 요소가 없기 때문에 마지막 30을 삭제하고 반환) ----------> 반환은 어디에?
print(a) -> [20, 10, 30, 20, 10]
a.reverse() : 리스트를 역순으로 출력
print(a) -> [10, 20, 30, 10, 20]

- 파이썬 리스트형 메서드 (추가/제거)
